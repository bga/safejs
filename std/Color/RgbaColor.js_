export Class(Object, {
  constructor: #(p) {
    p.eps = 0.001 
    p.red = 0
    p.green = 0
    p.blue = 0
    p.alpha = 0
  }
})
  
  
/**@var default epsilon for rgba color class instance */ 
RGBAProto.eps = 0.001;

/**@var default 1.0 - epsilon for rgba color class instance */ 
RGBAProto.oneSubEps = 1.0 - RGBAProto.eps;
  
/**@fn costum method to strict clone rgba color class instance */ 
RGBAProto._cloneStrict =
/**@fn costum method to strict copy rgba color class instance */ 
RGBAProto._copyStrict =
function()
{
  return new $jb.Color.RGBA(this.r, this.g, this.b, this.a);
};
  
/**
  @fn mul each component of color by number except alpha component <b>without clipping</b>
  @param n {Number} number to mul 
  @return {$jb.Color.RGBA} this
*/
RGBAProto._mulNumber = function(n)
{
  this.r *= n;
  this.g *= n;
  this.b *= n;
  
  //if(n>1.0)
  //  this._clipUp();
  
  return this;
};

/**
  @fn normalize each component of color by alpha component - mul on alpha component and set alpha component to 1.0 
  @return {$jb.Color.RGBA} this
*/
RGBAProto._normalizeAlpha = function()
{
  if(this.a == 1.0)
    return this;
  
  var a = this.a;
  
  this.r *= a;
  this.g *= a;
  this.b *= a;
  this.a = 1.0;
  
  return this;
};

/**
  @fn add another color, component by component without alpha component and clipping
  @param c {$jb.Color.RGBA} color to add
  @return {$jb.Color.RGBA} this
*/
RGBAProto._addColor = function(c)
{
  //if(typeof(c) == 'string')
  //  c = new $jb.Color.RGBA(c);
  
  this.r += c.r;
  this.g += c.g;
  this.b += c.b;
  
  //this._clipUp();
  
  return this;
};

/**
  @fn add another color, component by component considering alpha component but without clipping
  @param c {$jb.Color.RGBA} color to add
  @return {$jb.Color.RGBA} this
*/
RGBAProto._addColorA = function(c)
{
  //if(typeof(c) == 'string')
  //  c = new $jb.Color.RGBA(c);

  var coef = c.a/this.a;
  
  if(coef > this.oneSubEps)
  {
    this.r += c.r;
    this.g += c.g;
    this.b += c.b;
  }
  else
  {
    this.r += c.r*coef;
    this.g += c.g*coef;
    this.b += c.b*coef;
  }
  
  //this._clipUp();
  
  return this;
};

/**
  @fn blend with another color without clipping
  @param c {$jb.Color.RGBA} color with which blend
  @return {$jb.Color.RGBA} <this>
*/
RGBAProto._blendWithColor = function(c)
{
  //if(typeof(c) == 'string')
  //  c = new $jb.Color.RGBA(c);

  if(this.a > this.oneSubEps)
    return this;

  var coef = this.a;
  
  this.r *= coef;
  this.g *= coef;
  this.b *= coef;

  coef = (1.0 - coef)*c.a;
  
  this.r += coef*c.r;
  this.g += coef*c.g;
  this.b += coef*c.b;
  
  this.a += coef;
  
  return this;
};


/**
  @fn clip color by up bound without alpha component
  @return {$jb.Color.RGBA} <this>
*/
RGBAProto._clipUp = function()
{
  if(this.r > 255.0)
    this.r = 255.0;
  else if(this.r < 0)
    this.r = 0;
  
  if(this.g > 255.0)
    this.g = 255.0;
  else if(this.g < 0)
    this.g = 0;

  if(this.b > 255.0)
    this.b = 255.0;
  else if(this.b < 0)
    this.b = 0;
    
  return this;  
};

/**
  @fn clip color by down bound without alpha component
  @return {$jb.Color.RGBA} <this>
*/
RGBAProto._clipDown = function()
{
  if(this.r < 0)
    this.r = 0;
  
  if(this.g < 0)
    this.g = 0;

  if(this.b < 0)
    this.b = 0;
    
  return this;  
};


/**
  @fn clip color without alpha component
  @return {$jb.Color.RGBA} <this>
*/
RGBAProto._clip = function()
{
  if(this.r > 255.0)
    this.r = 255.0;
  else if(this.r < 0)
    this.r = 0;
  
  if(this.g > 255.0)
    this.g = 255.0;
  else if(this.g < 0)
    this.g = 0;

  if(this.b > 255.0)
    this.b = 255.0;
  else if(this.b < 0)
    this.b = 0;
    
  return this;  
};


/**
  @fn clip color alpha component by up bound
  @return {$jb.Color.RGBA} <this>
*/
RGBAProto._clipUpA = function()
{
  if(this.a > 1.0)
    this.a = 1.0;
  
  return this;
};

/**
  @fn clip color alpha component by down bound
  @return {$jb.Color.RGBA} <this>
*/
RGBAProto._clipDownA = function()
{
  if(this.a < 0)
    this.a = 0;
  
  return this;
};

/**
  @fn clip color alpha component
  @return {$jb.Color.RGBA} <this>
*/
RGBAProto._clipA = function()
{
  if(this.a > 1.0)
    this.a = 1.0;
  else if(this.a < 0)
    this.a = 0;
  
  return this;
};

/**
  @fn convert color to hvs representation
  @source http://en.wikipedia.org/wiki/HSL_and_HSV
  @return {$jb.Color.HSVA} new hsva color
*/
RGBAProto._toHSVAColor = function()
{
  var r = this.r/255,
    g = this.g/255,
    b = this.b/255,
    v = r,
    minC = r
    ;
  
  if(g > v)
    v = g;
  if(b > v)
    v = b;

  if(g < minC)
    minC = g;
  if(b < minC)
    minC = b;
    
  var dMaxMin = v - minC,
    s = (v < this.eps) ? 0.0: dMaxMin/v,
    h;

  switch(v)
  {
    case r:
      h = 0.16666*(g - b)/dMaxMin;
      break;
    case g:
      h = 0.3333 + 0.16666*(b - r)/dMaxMin;
      break;
    case b:
      h = 0.6666 + 0.16666*(r - g)/dMaxMin;
      break;
  }  

  if(h > 1.0)
    h -= 1.0;
  else if(h < 0.0)
    h += 1.0;
  
  return new $jb.Color.HSVA(2*Math.PI*h, s, v, this.a);  
};

/**
  @fn convert color to rgb(r,g,b) string
  @return {String} rgb(r,g,b) string
*/
RGBAProto._toRGBString = function()
{
  return 'rgb(' + (this.r|0) + ',' + (this.g|0) + ',' + (this.b|0) + ')';
};

/**
  @fn convert color to rgba(r,g,b,a) string
  @return {String} rgba(r,g,b,a) string
*/
RGBAProto._toRGBAString = function()
{
  return 'rgba('.conact((this.r|0), ',', (this.g|0), ',', (this.b|0), ',', this.a, ')');
};

/**
  @fn convert color to #rrggbb hex string
  
  @return {String} #rrggbb hex string
*/
RGBAProto._toCSSString = function()
{
  return '#' + (0x1000000 | (this.r << 16) | (this.g << 8) | this.b).toString(16).slice(1);
};

/**
  @fn convert color to #rrggbbaa hex string
  
  @return {String} #rrggbbaa hex string
*/
RGBAProto._toCSSAString = function()
{
  return '#' + ('00000000' + ((this.r << 24) | (this.g << 16) | (this.b << 8) | (255*this.a)).toString(16)).slice(-8);
};

/**
  @fn costum toString method which convert color to rgba(r,g,b,a) or rgb(r,g,b) string depend of alpha component value
  @return {String} rgba(r,g,b,a) or rgb(r,g,b) string
*/
RGBAProto.toString = function()
{
  if(this.a > this.oneSubEps)
    return this._toRGBString();
  else
    return this._toRGBAString();
};

/**
  @fn return 0xrrggbb form of color
  @return {Number}
*/  
RGBAProto._toRGBHex = function()
{
  return (this.r << 16) | (this.g << 8) | this.b;
};

/**
  @fn parse color from 0xrrggbb form
  @return {$jb.Color.RGBA} <this>
*/  
RGBAProto._fromRGBHex = function(h)
{
  this.r = (h >>> 16)       ;
  this.g = (h >>> 8 ) & 0xff;
  this.b = (h       ) & 0xff;
  
  return this;
};

/**
  @fn return 0xrrggbbaa form of color
  @return {Number}
*/  
RGBAProto._toRGBAHex = function()
{
  return (this.r << 24) | (this.g << 16) | (this.b << 8) |  (255*this.a);
};

/**
  @fn parse color from 0xrrggbbaa form
  @return {$jb.Color.RGBA} <this>
*/  
RGBAProto._fromRGBAHex = function(h)
{
  this.r = (h >>> 24)       ;
  this.g = (h >>> 16) & 0xff;
  this.b = (h >>> 8 ) & 0xff;
  this.a = (h       )/255;
  
  return this;
};

/**
  @fn return 0xaarrggbb form of color
  @return {Number}
*/  
RGBAProto._toARGBHex = function()
{
  return ((255*this.a) << 24) | (this.r << 16) | (this.g << 8) | this.b;
};

/**
  @fn parse color from 0xaarrggbb form
  @return {$jb.Color.RGBA} <this>
*/  
RGBAProto._fromARGBHex = function(h)
{
  this.a = (h >>> 24)/255;
  this.r = (h >>> 16)       ;
  this.g = (h >>> 8) & 0xff;
  this.b = (h      ) & 0xff;
  
  return this;
};

(function()
{
  var _parseValue = function(t)
  {
    console.log(t);
    
    return (t.slice(-1) == '%') ? 2.55*t.slice(0, -1) : +t;
  };
  
  var _parseInt = $G.parseInt;

  /**
    @fn parse color from any popular string representation of color i.e. rgb(r,g,b) rgba(r,g,b,a) #rgb #rrggbb #rrggbbaa and set all color components. Also hsv(h,s,v) hsva(h,s,v,a) with convertation to rgba if $jb.Color.HSVA class loaded
    @return {Boolean} parse success status 
  */
  RGBAProto._fromString = function(s)
  {
    // css color
    if(s.charAt(0) == '#')
    {
      var h = _parseInt(s.slice(1), 16);
      
      switch(s.length)
      {
        // short version
        case 4:
          this.r = 0x11*((h >>> 8)      );
          this.g = 0x11*((h >>> 4) & 0xf);
          this.b = 0x11*((h      ) & 0xf);
          break;
        
        // long version
        case 7: 
          this.r = (h >>> 16)       ;
          this.g = (h >>> 8 ) & 0xff;
          this.b = (h       ) & 0xff;
          break;

        case 9:
          this.r = (h >>> 24)       ;
          this.g = (h >>> 16) & 0xff;
          this.b = (h >>> 8 ) & 0xff;
          this.a = (h       )/255;
          break;
      }
      
      return true;
    }
    
    var j = 0,
      endChar,
      _parseValueC = _parseValue;

    if(s.substr(0, 4) == 'rgb(')
    {  
      j = 3;
      endChar = ')';
    }
    else if(s.substr(0, 5) == 'rgba(')
    {
      j = 4;
      endChar = ',';
    }
    
    // canvas rgb
    if(j > 0)
    {
      this.r = _parseValueC(s.substring(++j, (j = s.indexOf(',', j))));
      this.g = _parseValueC(s.substring(++j, (j = s.indexOf(',', j))));
      this.b = _parseValueC(s.substring(++j, (j = s.indexOf(endChar, j))));
    }
    
    // canvas rgba
    if(endChar == ',')
      this.a = _parseValueC(s.substring(++j, (j = s.indexOf(')', j))))/255;
    
    if(j > 0)
      return true;
    
    // try read as HSVA color
    
    if($jb.Color.HSVA == null)
      return false;
      
    var hsva = new $jb.Color.HSVA();
    
    if(hsva._fromString(s))
    {
      var rgba = hsva._toRGBAColor();
      
      this.r = rgba.r;
      this.g = rgba.g;
      this.b = rgba.b;
      this.a = rgba.a;
      
      return true;
    }
    
    return false;
  };
})();  
});