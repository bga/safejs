export Class(Object, {  constructor: #(p) {    # key of eng template -> { engTemplate, otherLangTemplate, argsPermutation }    p.traslations = { __proto__: null }  }  parseFromString: #(p, s) {    using(mixin(String, {      matchEndOfString: #(p, pos) {        assert(p.charAt(pos) == `"`)        loop {          pos = p.indexOf(`"`, pos + 1)          assert(pos != -1)          if(p.charAt(pos + 1) == `"`) {            pos = $f + 2          }          else {            break          }        }        $r = pos + 1      }      skipSpaces: #(p, pos) {        $r = pos + p.slice(pos).match(/^[ ]*/)[0].length      }    }))    $r = Self.new(){      var pos = s.skipSpaces(0)      loop {        assert(s.charAt(pos) == `"`)        var q = s.matchEndOfString(pos)        fix engTemplate = I18nTemplate.new().parseFromString(s.slice(pos + 1, (pos = q) - 1))        pos = s.skipSpaces(pos)        assert(s.slice(pos, pos + 2) == `==`)        pos = $f + 2        pos = s.skipSpaces(pos)        assert(s.charAt(pos) == `"`)        q = s.matchEndOfString(pos)        fix otherLangTemplate = I18nTemplate.new().parseFromString(s.slice(pos + 1, (pos = q) - 1))        $.traslations[engTemplate.getDbKey()] = {          engTemplate: engTemplate,           tranlationTemplate: otherLangTemplate         }        pos = s.skipSpaces(pos)        if(pos >= s.length) {          break        }      }    }  }})